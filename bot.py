import os
import logging
import asyncio
import time
import json
import sqlite3
from datetime import datetime
from typing import List, Dict, Any, Optional, Union, Tuple, Set

from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand,
    BotCommandScopeChat
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    PicklePersistence
)

from database import Database

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# Initialize database
db = Database()

# Admin IDs - replace with actual admin user IDs
ADMIN_IDS = [6327617477]  # Add your admin Telegram user IDs here

# States for conversation handlers
BROADCAST_MESSAGE = 0
AWAITING_CHECK_VALUE = 1
AWAITING_ADD_VALUE = 2
AWAITING_REMOVE_VALUE = 3
AWAITING_WL_TYPE = 4
AWAITING_WL_REASON = 5

# WL types and reasons
WL_TYPES = ["GTD", "FCFS"]
WL_REASONS = ["Fluffy holder", "X contributor"]

# Keys for storing the active message in user_data
ACTIVE_MESSAGE_KEY = 'active_message'  # Store (chat_id, message_id) for active menu

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
BOT_ACTIVE_MESSAGE_KEY = 'active_bot_message'  # –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞

# Define command handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /start command"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # Add user to the database
    db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        chat_id=chat_id
    )
    
    # Log the event
    db.log_event("start", user.id)
    
    # Show main menu with inline buttons
    await show_main_menu(update, context)
    
    # Also show persistent keyboard at bottom
    await show_persistent_keyboard(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show the main menu"""
    # Keyboard for main menu
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="action_check")],
    ]
    
    # Add stats button only for admins
    user = update.effective_user
    if user and user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="action_stats")])
    
    # Add links/FAQ button
    keyboard.append([InlineKeyboardButton("üìö –°—Å—ã–ª–∫–∏/FAQ", callback_data="action_links")])
    
    # Add admin panel button if user is admin
    if user and user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="action_admin")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Main menu message
    message_text = (
        "*üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é MegaBuddies WL Bot*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ\n"
    )
    
    if user and user.id in ADMIN_IDS:
        message_text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
    
    message_text += "‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ FAQ\n"
    
    if user and user.id in ADMIN_IDS:
        message_text += "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–π—Ç–ª–∏—Å—Ç–æ–º (–∞–¥–º–∏–Ω)\n"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /help command"""
    await show_help_menu(update, context)
    # Show keyboard after help command
    await show_persistent_keyboard(update, context)

async def show_help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show help information with a back button"""
    user = update.effective_user
    
    # Base commands for all users
    help_text = (
        "*üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ MegaBuddies*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ `/check` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ\n"
        "‚Ä¢ `/menu` - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        
        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n"
        "1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º\n\n"
    )
    
    # Add admin commands if user is admin
    if user.id in ADMIN_IDS:
        help_text += (
            "*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n"
            "‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ `/add` - –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ `/remove` - –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ `/list` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ `/broadcast` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "‚Ä¢ `/stats` - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞\n\n"
        )
    
    # Add back button
    keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update_or_send_message(
        update,
        context,
        help_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_check_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show menu for checking a value against whitelist"""
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:"
    
    if update.callback_query:
        # –ö–æ–≥–¥–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
        query = update.callback_query
        await query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=message_text,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    context.user_data['expecting_check'] = True
    
    # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
    if BOT_ACTIVE_MESSAGE_KEY in context.chat_data:
        del context.chat_data[BOT_ACTIVE_MESSAGE_KEY]
    
    return AWAITING_CHECK_VALUE

async def handle_check_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle checking a value in the whitelist"""
    user = update.effective_user
    value = update.message.text.strip()
    
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: '{value}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    # Check the value against whitelist
    result = db.check_whitelist(value)
    
    # Log the check event
    db.log_event("check_whitelist", update.effective_user.id, {"value": value}, bool(result.get("found", False)))
    
    # Create reply markup with buttons for next actions
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="action_check")],
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Prepare response message
    if result.get("found", False):
        message_text = (
            f"‚úÖ {user.first_name}, –≤–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ!\n\n"
            f"*–ó–Ω–∞—á–µ–Ω–∏–µ:* `{value}`\n"
            f"*–¢–∏–ø WL:* {result.get('wl_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"*–ü—Ä–∏—á–∏–Ω–∞:* {result.get('wl_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
        )
    else:
        message_text = (
            f"‚ùå {user.first_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–Ω–∞—á–µ–Ω–∏–µ `{value}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ.\n\n"
            f"–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º –≤–∞—à–µ–≥–æ –≤–∫–ª–∞–¥–∞ –≤ –ø—Ä–æ–µ–∫—Ç. "
            f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–æ–ø–∞—Å—Ç—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç!"
        )
    
    # Try to delete the user's message for cleaner interface
    try:
        await update.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # Send a new message with the result
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    # Reset the conversation state for this user
    # Now the user can go in different directions based on buttons
    # or start a new check by sending another message
    return ConversationHandler.END

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show the admin panel menu"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        # If not admin, show error and return to main menu
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
            await show_main_menu(update, context)
        else:
            await update_or_send_message(
                update, 
                context,
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.",
                parse_mode='Markdown'
            )
        return
    
    # Admin menu keyboard - optimized layout
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="admin_add"),
            InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="admin_remove")
        ],
        [
            InlineKeyboardButton("üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_list"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="admin_broadcast")
        ],
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    admin_text = (
        "*üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:\n\n"
        "‚Ä¢ *–î–æ–±–∞–≤–∏—Ç—å* - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ *–£–¥–∞–ª–∏—Ç—å* - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö* - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ *–†–∞—Å—Å—ã–ª–∫–∞* - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
    )
    
    await update_or_send_message(
        update,
        context,
        admin_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /stats command"""
    await show_stats_menu(update, context)

async def show_stats_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show statistics of the bot usage"""
    user = update.effective_user
    
    # Check if user is admin
    if user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        else:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    
    # Get statistics
    total_users = db.get_total_users()
    active_users = db.get_active_users()
    whitelist_count = db.get_whitelist_count()
    checks_count = db.get_checks_count()
    last_day_checks = db.get_checks_count(days=1)
    last_week_checks = db.get_checks_count(days=7)
    
    # Format message
        stats_text = (
            "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {active_users}\n\n"
        
        f"*–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:*\n"
        f"–ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {whitelist_count}\n\n"
        
        f"*–ü—Ä–æ–≤–µ—Ä–∫–∏:*\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {checks_count}\n"
        f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {last_day_checks}\n"
        f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {last_week_checks}\n"
    )
    
    # Add back buttons
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")],
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Update message or send new
    if update.callback_query:
        await update.callback_query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
        stats_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_add_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show menu for adding a value to whitelist"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return ConversationHandler.END
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_admin")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "‚ùóÔ∏è –í–∞–∂–Ω–æ: —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "‚ùóÔ∏è –í–∞–∂–Ω–æ: —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=reply_markup
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞–π—Ç–ª–∏—Å—Ç
    context.user_data['expecting_add'] = True
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    if 'add_data' in context.user_data:
        del context.user_data['add_data']
    
    return AWAITING_ADD_VALUE

async def handle_add_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process the value for whitelist and ask for WL type"""
    value = update.message.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: '{value}'")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data['add_data'] = {'value': value}
    logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ add_data: {context.user_data['add_data']}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    keyboard = []
    for wl_type in WL_TYPES:
        keyboard.append([InlineKeyboardButton(wl_type, callback_data=f"wl_type_{wl_type}")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    message_text = (
        f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: *{value}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–π—Ç–ª–∏—Å—Ç–∞:"
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.delete_message(
            chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
    except Exception as e:
        logger.debug(f"Could not delete user message: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    await update_or_send_message(
        update,
        context,
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    logger.debug(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AWAITING_WL_TYPE ({AWAITING_WL_TYPE})")
    return AWAITING_WL_TYPE

async def handle_wl_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process WL type selection and ask for reason"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–∑ callback_data
    selected_type = query.data.replace("wl_type_", "")
    logger.debug(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø WL: {selected_type}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö add_data
    if 'add_data' not in context.user_data:
        logger.error("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ 'add_data' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_add")
            ]])
        )
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö
    if selected_type not in WL_TYPES:
        logger.error(f"–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø '{selected_type}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_add")
            ]])
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    context.user_data['add_data']['wl_type'] = selected_type
    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ add_data: {context.user_data['add_data']}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã
    keyboard = []
    for reason in WL_REASONS:
        keyboard.append([InlineKeyboardButton(reason, callback_data=f"wl_reason_{reason}")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã
    value = context.user_data['add_data']['value']
    message_text = (
        f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: *{value}*\n"
        f"–¢–∏–ø –≤–∞–π—Ç–ª–∏—Å—Ç–∞: *{selected_type}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞–π—Ç–ª–∏—Å—Ç:"
    )
    
    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    logger.debug(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AWAITING_WL_REASON ({AWAITING_WL_REASON})")
    return AWAITING_WL_REASON

async def handle_wl_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process whitelist reason selection"""
    query = update.callback_query
    await query.answer()
    
    # Get the selected reason
    selected_reason = query.data
    
    # Only process if in the right state
    if 'add_data' not in context.user_data:
        logger.warning(f"handle_wl_reason –≤—ã–∑–≤–∞–Ω –±–µ–∑ add_data –≤ context.user_data")
        return ConversationHandler.END
    
    # Save the selected reason
    context.user_data['add_data']['reason'] = selected_reason
    
    # Get data from context
    add_data = context.user_data.get('add_data', {})
    value = add_data.get('value', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    wl_type = add_data.get('wl_type', 'FCFS')
    
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É: value='{value}', type='{wl_type}', reason='{selected_reason}'")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç
        success = db.add_to_whitelist(value, wl_type, selected_reason)
    
    # Log event
        db.log_event("add_whitelist", update.effective_user.id, {
            "value": value, 
            "wl_type": wl_type, 
            "wl_reason": selected_reason
        }, success)
    
    # Create response message
    if success:
            logger.debug(f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            message_text = (
                f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç!\n\n"
                f"*–ó–Ω–∞—á–µ–Ω–∏–µ:* `{value}`\n"
                f"*–¢–∏–ø WL:* {wl_type}\n"
                f"*–ü—Ä–∏—á–∏–Ω–∞:* {selected_reason}"
            )
    else:
            logger.debug(f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        message_text = f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ \"{value}\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ."
    
    # Buttons for next action
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="admin_add")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
        # Send the response
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        if 'add_data' in context.user_data:
            del context.user_data['add_data']
            logger.debug("–î–∞–Ω–Ω—ã–µ add_data –æ—á–∏—â–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        message_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è \"{value}\" –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
        
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="admin_add")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
        message_text,
        reply_markup=reply_markup
    )
    
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        if 'add_data' in context.user_data:
            del context.user_data['add_data']
            logger.debug("–î–∞–Ω–Ω—ã–µ add_data –æ—á–∏—â–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
        
    return ConversationHandler.END

async def show_remove_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show menu for removing a value from whitelist"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return ConversationHandler.END
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_admin")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞:",
            reply_markup=reply_markup
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    context.user_data['expecting_remove'] = True
    
    return AWAITING_REMOVE_VALUE

async def handle_remove_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process removing a value from whitelist"""
    value = update.message.text.strip()
    
    # Remove from whitelist
    success = db.remove_from_whitelist(value)
    
    # Log event
    db.log_event("remove_whitelist", update.effective_user.id, {"value": value}, success)
    
    # Create response message
    if success:
        message_text = f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ \"{value}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞!"
    else:
        message_text = f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ \"{value}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ."
    
    # Buttons for next action
    keyboard = [
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data="admin_remove")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Use delete_and_update_message instead
    await delete_and_update_message(
        update,
        context,
        message_text,
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def show_list_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show all values in whitelist with pagination"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        else:
            await update_or_send_message(
                update,
                context,
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.",
                parse_mode='Markdown'
            )
        return
    
    # Get values from whitelist
    items = db.get_all_whitelist()
    
    # Create response message
    if items:
        items_per_page = 5  # –ú–µ–Ω—å—à–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        page = context.user_data.get('whitelist_page', 0)
        total_pages = (len(items) + items_per_page - 1) // items_per_page
        
        # Ensure page is valid
        if page >= total_pages:
            page = 0
        
        # Save current page
        context.user_data['whitelist_page'] = page
        
        # Get values for current page
        start = page * items_per_page
        end = min(start + items_per_page, len(items))
        
        message_text = (
            f"*üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö*\n\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(items)}\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {total_pages}\n\n"
        )
        
        # Add values with numbering in a clean format
        for i, item in enumerate(items[start:end], start=start+1):
            message_text += (
                f"{i}. `{item['value']}`\n"
                f"   –¢–∏–ø: {item['wl_type']}, –ü—Ä–∏—á–∏–Ω–∞: {item['wl_reason']}\n\n"
            )
        
        # Navigation buttons
        keyboard = []
        nav_row = []
        
        if total_pages > 1:
            if page > 0:
                nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="whitelist_prev"))
            
            nav_row.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="whitelist_info"))
            
            if page < total_pages - 1:
                nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="whitelist_next"))
            
            keyboard.append(nav_row)
    else:
        message_text = "*üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö*\n\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞."
    
    # Back buttons
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update_or_send_message(
        update,
        context,
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_whitelist_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle whitelist pagination buttons"""
    query = update.callback_query
    
    # Get current page
    page = context.user_data.get('whitelist_page', 0)
    
    # Update page based on button
    if query.data == "whitelist_next":
        page += 1
    elif query.data == "whitelist_prev":
        page -= 1
    
    # Save updated page
    context.user_data['whitelist_page'] = page
    
    # Show updated list
    await show_list_menu(update, context)

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the broadcast conversation"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Use update_or_send_message instead of creating a new message
    await update_or_send_message(
        update,
        context,
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=reply_markup
    )
    
    return BROADCAST_MESSAGE

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle the message to broadcast"""
    message_text = update.message.text
    
    if not message_text:
        await update_or_send_message(
            update,
            context,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
            ]])
        )
        return BROADCAST_MESSAGE
    
    users = db.get_all_users()
    
    if not users:
        await update_or_send_message(
            update,
            context,
            "–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_admin")
            ]])
        )
        return ConversationHandler.END
    
    # Log broadcast event
    db.log_event("broadcast", update.effective_user.id, {"message_length": len(message_text)})
    
    # Try to delete the user's input message
    try:
        await context.bot.delete_message(
            chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
    except Exception as e:
        logger.debug(f"Could not delete user message: {e}")
    
    # Use our main message for progress updates
    await update_or_send_message(
        update,
        context,
        f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
    )
    
    success_count = 0
    fail_count = 0
    
    # Show progress updates periodically
    progress_interval = max(1, len(users) // 10)
    last_progress_update = time.time()
    
    for i, (user_id, chat_id) in enumerate(users):
        try:
            await context.bot.send_message(chat_id=chat_id, text=message_text)
            success_count += 1
            
            # Update progress message periodically
            if (i % progress_interval == 0 or i == len(users) - 1) and time.time() - last_progress_update > 2:
                progress_percent = int((i + 1) / len(users) * 100)
                await update_or_send_message(
                    update,
                    context,
                    f"–†–∞—Å—Å—ã–ª–∫–∞: {progress_percent}% ({i+1}/{len(users)})\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {fail_count}"
                )
                last_progress_update = time.time()
            
            # Add a small delay to avoid hitting rate limits
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.error(f"Failed to send message to user {user_id}: {e}")
            fail_count += 1
    
    # Final results with buttons
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update_or_send_message(
        update,
        context,
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {fail_count}",
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel the broadcast conversation"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")
        ]])
    )
    
    return ConversationHandler.END

async def show_broadcast_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show menu for broadcast with options"""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    
    # Instructions for broadcast
    broadcast_text = (
        "*üì£ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞, "
        "–≤—ã–±–µ—Ä–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–æ—Ç –Ω–∞—á–Ω–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É."
    )
    
    # Add buttons
    keyboard = [
        [InlineKeyboardButton("‚úâÔ∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_broadcast")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        # Edit message if callback query
        await update.callback_query.edit_message_text(
            broadcast_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        # Send new message if command
        await update.message.reply_text(
            broadcast_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def start_broadcast_from_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Start broadcast process from button click"""
    query = update.callback_query
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    
    # Show message asking for broadcast text
    await query.edit_message_text(
        "*üì£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")
        ]])
    )
    
    # Set context variable to expect broadcast message
    context.user_data['expecting_broadcast'] = True

async def start_broadcast_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Process broadcast message and start sending"""
    message_text = update.message.text
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return
    
    # Validate message
    if not message_text or len(message_text.strip()) == 0:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")
            ]])
        )
        return
    
    # Get users for broadcasting
    users = db.get_all_users()
    
    if not users:
        await update.message.reply_text(
            "–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")
            ]])
        )
        return
    
    # Start broadcast
    status_message = await update.message.reply_text(
        f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )
    
    # Send messages
    success_count = 0
    fail_count = 0
    
    for i, (user_id, chat_id) in enumerate(users):
        try:
            # Send the message
            await context.bot.send_message(
                chat_id=chat_id, 
                text=message_text,
                disable_notification=False
            )
            success_count += 1
            
            # Update status message every 10 users
            if (i+1) % 10 == 0 or i+1 == len(users):
                await status_message.edit_text(
                    f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞: {i+1}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {fail_count}"
                )
            
            # Add a small delay to avoid hitting rate limits
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.error(f"Failed to send message to user {user_id}: {e}")
            fail_count += 1
    
    # Final status
    await status_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {fail_count}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")
        ]])
    )
    
    # Log broadcast event
    db.log_event("broadcast", user.id, {
        "total": len(users),
        "success": success_count,
        "fail": fail_count
    })

async def show_persistent_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show a minimal persistent keyboard at the bottom of the chat"""
    user = update.effective_user
    
    # Create keyboard buttons - simplified for cleaner UI
    keyboard = []
    
    # Base navigation for all users including Links/FAQ
    keyboard.append(["üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", "üìö –°—Å—ã–ª–∫–∏/FAQ", "üè† –ú–µ–Ω—é"])
    
    # Add admin button if user is admin
    if user.id in ADMIN_IDS:
        keyboard.append(["üëë –ê–¥–º–∏–Ω"])
    
    # Create the reply markup with the keyboard
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,      # Make the keyboard smaller
        one_time_keyboard=False,   # Keep the keyboard visible
        selective=False,           # Show to all users in the chat
        input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏..."  # Helpful placeholder
    )
    
    # Set the keyboard without sending a message
    if update.message:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
            reply_markup=reply_markup
        )
    elif update.callback_query:
        await context.bot.send_message(
            chat_id=update.callback_query.message.chat_id,
            text="‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
            reply_markup=reply_markup
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
            reply_markup=reply_markup
        )

# Add function to delete user message and update or send message
async def delete_and_update_message(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE, 
    text: str, 
    reply_markup=None, 
    parse_mode=None
) -> None:
    """Delete user message and update the single bot message or send a new one"""
    # Try to delete the user's message if possible
    if update.message:
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=update.message.message_id
            )
        except Exception as e:
            logger.debug(f"Could not delete user message: {e}")
    
    # Then update the bot's single message
    await update_or_send_message(update, context, text, reply_markup, parse_mode)

# Add function to save active message
async def save_active_message(update: Update, context: ContextTypes.DEFAULT_TYPE, message) -> None:
    """Save the active message ID for a user to enable in-place updates"""
    context.user_data[ACTIVE_MESSAGE_KEY] = (message.chat_id, message.message_id)

# Add function to update or send message
async def update_or_send_message(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE, 
    text: str, 
    reply_markup=None, 
    parse_mode=None
) -> None:
    """Update existing message or send a new one for clean interface"""
    # If this is a callback query, try to edit the message
    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            return
        except Exception as e:
            logger.debug(f"Could not edit callback query message: {e}")
    
    # If we have an active message ID for this chat, try to edit it
    chat_id = chat_id_from_update(update)
    if BOT_ACTIVE_MESSAGE_KEY in context.chat_data:
        active_message_id = context.chat_data[BOT_ACTIVE_MESSAGE_KEY]
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=active_message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            return
        except Exception as e:
            logger.debug(f"Could not edit active message {active_message_id}: {e}")
    
    # If we couldn't edit, send a new message
    if update.message:
        message = await update.message.reply_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    else:
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    
    # Store the message ID as the active one for this chat
    context.chat_data[BOT_ACTIVE_MESSAGE_KEY] = message.message_id

async def clean_old_bot_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Clean up old bot messages to keep chat clean, except the active message"""
    chat_id = chat_id_from_update(update)
    
    # If we have an active message, keep track of it
    active_message_id = None
    if BOT_ACTIVE_MESSAGE_KEY in context.chat_data:
        active_message_id = context.chat_data[BOT_ACTIVE_MESSAGE_KEY]
    
    # Try to get recent messages to delete old ones
    try:
        # We can only delete recent messages that the bot sent
        # We'll use getUpdates with a limit to avoid excessive API calls
        # This is an approximation as getUpdates has limitations
        recent_updates = await context.bot.get_updates(limit=10, timeout=0)
        
        # Find messages from this bot in this chat
        bot_id = context.bot.id
        for bot_update in recent_updates:
            if (bot_update.message and 
                bot_update.message.from_user and 
                bot_update.message.from_user.id == bot_id and
                bot_update.message.chat_id == chat_id and
                (active_message_id is None or bot_update.message.message_id != active_message_id)):
                
                # Try to delete this old message
                try:
                    await context.bot.delete_message(
                        chat_id=chat_id,
                        message_id=bot_update.message.message_id
                    )
                except Exception as e:
                    logger.debug(f"Could not delete old bot message: {e}")
    except Exception as e:
        logger.debug(f"Error getting updates to clean messages: {e}")

def chat_id_from_update(update: Update) -> int:
    """Extract chat ID from an update object"""
    if update.effective_chat:
        return update.effective_chat.id
    elif update.callback_query and update.callback_query.message:
        return update.callback_query.message.chat_id
    elif update.message:
        return update.message.chat_id
    else:
        # Fallback - should not happen in normal operation
        return 0

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for processing all non-command messages"""
    if not update.message or not update.message.text:
        return
    
    # Update user activity
    db.update_user_activity(update.effective_user.id)
    
    text = update.message.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    user_id = update.effective_user.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{text}'")
    logger.debug(f"–¢–µ–∫—É—â–∏–µ —Ñ–ª–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: expecting_check={context.user_data.get('expecting_check')}, expecting_add={context.user_data.get('expecting_add')}, expecting_remove={context.user_data.get('expecting_remove')}")
    
    # Handle button presses from persistent keyboard - simplified
    if text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å":
        await show_check_menu(update, context)
        return
    elif text == "üìö –°—Å—ã–ª–∫–∏/FAQ":
        await show_links_menu(update, context)
        return
    elif text == "üè† –ú–µ–Ω—é":
        await show_main_menu(update, context)
        return
    elif text == "üëë –ê–¥–º–∏–Ω" and update.effective_user.id in ADMIN_IDS:
        await show_admin_menu(update, context)
        return
    
    # Handle conversation states with —è–≤–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    if context.user_data.get('expecting_add'):
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: '{text}'")
        context.user_data['expecting_add'] = False
        await handle_add_value(update, context)
        return  # –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π return, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist
    elif context.user_data.get('expecting_remove'):
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: '{text}'")
        context.user_data['expecting_remove'] = False
        await handle_remove_value(update, context)
        return  # –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π return, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist
    elif context.user_data.get('expecting_check'):
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: '{text}'")
        context.user_data['expecting_check'] = False
        await handle_check_value(update, context)
        return  # –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π return, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist
    elif context.user_data.get('expecting_broadcast'):
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: '{text}'")
        context.user_data['expecting_broadcast'] = False
        await start_broadcast_process(update, context)
        return  # –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π return, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist
    else:
        # Normal message handling - check whitelist
        # Treat any text as a check query for simplicity
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: '{text}'")
        
        try:
        # Check the value against whitelist
        value = text
        result = db.check_whitelist(value)
            user = update.effective_user
        
        # Create beautiful response
            if result.get("found", False):
            message_text = (
                f"*‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏*\n\n"
                    f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
                    f"–ó–Ω–∞—á–µ–Ω–∏–µ `{value}` *–Ω–∞–π–¥–µ–Ω–æ* –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n"
                    f"–£ –≤–∞—Å {result.get('wl_type', '–ù–µ —É–∫–∞–∑–∞–Ω')} WL –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã {result.get('wl_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}! üéâ"
            )
        else:
            message_text = (
                f"*‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏*\n\n"
                    f"–ù–∞–º –∂–∞–ª—å, {user.first_name}, –Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç –≤ BuddyWL.\n\n"
                    f"–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º —Ç–≤–æ–π –≤–∫–ª–∞–¥ –∏ –Ω–∞–¥–µ–µ–º—Å—è —Å–∫–æ—Ä–æ —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è —É–∂–µ –≤–º–µ—Å—Ç–µ —Å —Ç–≤–æ–∏–º Buddy! üí´"
            )
        
        # Buttons for next action
        keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="action_check")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Try to delete the user message for cleaner interface
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=update.message.message_id
            )
        except Exception as e:
            logger.debug(f"Could not delete user message: {e}")
        
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text=message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if BOT_ACTIVE_MESSAGE_KEY in context.chat_data:
            del context.chat_data[BOT_ACTIVE_MESSAGE_KEY]

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle button callbacks"""
    query = update.callback_query
    callback_data = query.data
    
    logger.debug(f"Button callback: {callback_data} from user {update.effective_user.id}")
    
    # Handle main menu actions
    if callback_data == "action_check":
        logger.debug(f"User {update.effective_user.id} pressed Check button")
        await show_check_menu(update, context)
    elif callback_data == "action_stats":
        logger.debug(f"User {update.effective_user.id} pressed Stats button")
        await show_stats_menu(update, context)
    elif callback_data == "action_links":
        logger.debug(f"User {update.effective_user.id} pressed Links/FAQ button")
        await show_links_menu(update, context)
    elif callback_data == "action_admin":
        logger.debug(f"User {update.effective_user.id} pressed Admin button")
        await show_admin_menu(update, context)
    elif callback_data == "back_to_main":
        logger.debug(f"User {update.effective_user.id} returned to main menu")
        await show_main_menu(update, context)
    elif callback_data == "menu_admin":
        logger.debug(f"User {update.effective_user.id} returned to admin menu")
        await show_admin_menu(update, context)
    
    # Admin menu actions
    elif callback_data == "admin_add":
        # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        context.user_data['expecting_add'] = True
        await show_add_menu(update, context)
    elif callback_data == "admin_remove":
        # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        context.user_data['expecting_remove'] = True
        await show_remove_menu(update, context)
    elif callback_data == "admin_list":
        await show_list_menu(update, context)
    elif callback_data == "admin_broadcast":
        await show_broadcast_menu(update, context)
    elif callback_data == "admin_stats":
        await show_stats_menu(update, context)
    # Whitelist pagination
    elif callback_data == "whitelist_next" or callback_data == "whitelist_prev":
        await handle_whitelist_pagination(update, context)
    # Broadcast actions
    elif callback_data == "broadcast_cancel":
        await cancel_broadcast(update, context)
    elif callback_data == "start_broadcast":
        await start_broadcast_from_button(update, context)
    # Other callbacks
    elif callback_data.startswith("remove_"):
        # Extract the value to remove
        value_to_remove = callback_data[7:]  # Remove "remove_" prefix
        success = db.remove_from_whitelist(value_to_remove)
        
        # Create response message with buttons
        if success:
            message_text = f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value_to_remove}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞."
        else:
            message_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ '{value_to_remove}' –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞."
        
        # Add a button to go back to admin menu
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Use delete_and_update_message instead of direct edit
        await delete_and_update_message(
            update,
            context,
            message_text,
            reply_markup=reply_markup
        )

async def show_links_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show links and FAQ information"""
    keyboard = [
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        "*üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ FAQ*\n\n"
        "üîó *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–æ–µ–∫—Ç–∞ Buddies:*\n"
        "‚Ä¢ [–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç](https://megabuddies.io)\n"
        "‚Ä¢ [Twitter/X](https://twitter.com/MegaBuddiesNFT)\n"
        "‚Ä¢ [Discord](https://discord.gg/megabuddies)\n\n"
        "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n"
        "‚Ä¢ *–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç?*\n"
        "  –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö\n\n"
        "‚Ä¢ *–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ?*\n"
        "  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n\n"
        "‚Ä¢ *–ì–¥–µ —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∞–Ω–æ–Ω—Å–∞—Ö?*\n"
        "  –í Discord –∏ Twitter/X –ø—Ä–æ–µ–∫—Ç–∞"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )

async def setup_commands(application: Application) -> None:
    """Set up bot commands and description"""
    bot = application.bot
    
    # Commands for all users
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("check", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    ]
    
    # Additional commands for admins
    admin_commands = commands + [
        BotCommand("admin", "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"),
        BotCommand("list", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ"),
        BotCommand("add", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç"),
        BotCommand("remove", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞"),
        BotCommand("broadcast", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"),
        BotCommand("stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
    ]
    
    # Set commands for all users
    await bot.set_my_commands(commands)
    
    # Set additional commands for admin users
    try:
        for admin_id in ADMIN_IDS:
            await bot.set_my_commands(
                admin_commands,
                scope=BotCommandScopeChat(chat_id=admin_id)
            )
        logger.info("Admin commands successfully set for all admins")
    except Exception as e:
        logger.error(f"Error setting admin commands: {e}")
    
    # Set bot description
    await bot.set_my_description(
        "MegaBuddies –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–π—Ç–ª–∏—Å—Ç–æ–º. "
        "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, "
        "–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º - —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ."
    )
    
    # Set short description for bot startup screen
    await bot.set_my_short_description(
        "–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–π—Ç–ª–∏—Å—Ç–æ–º MegaBuddies"
    )
    
    logger.info("Bot commands and descriptions set up successfully")

def main() -> None:
    """Start the bot"""
    # Get the bot token from environment variables
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.error("No BOT_TOKEN found in environment variables!")
        return
    
    # Initialize database
    try:
        logger.info("Initializing database...")
        global db
        db = Database()
        logger.info("Database initialized successfully")
    except Exception as e:
        logger.error(f"Error initializing database: {e}")
        return
    
    # Create the Application
    application = Application.builder().token(token).build()
    
    # Setup bot commands and description on startup
    application.post_init = setup_commands
    
    # Command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", show_main_menu))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    
    # Add conversation handler for check
    check_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("check", show_check_menu)],
        states={
            AWAITING_CHECK_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_check_value)]
        },
        fallbacks=[CallbackQueryHandler(button_callback)],
        name="check_conversation",
        persistent=False,
        per_chat=True
    )
    application.add_handler(check_conv_handler)
    
    # Add conversation handler for add
    add_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("add", show_add_menu),
            CallbackQueryHandler(show_add_menu, pattern="^admin_add$")
        ],
        states={
            AWAITING_ADD_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_value)],
            AWAITING_WL_TYPE: [CallbackQueryHandler(handle_wl_type, pattern="^wl_type_")],
            AWAITING_WL_REASON: [CallbackQueryHandler(handle_wl_reason, pattern="^wl_reason_")]
        },
        fallbacks=[
            CallbackQueryHandler(button_callback, pattern="^menu_admin$"),
            CallbackQueryHandler(button_callback, pattern="^back_to_main$"),
            MessageHandler(filters.COMMAND, button_callback)
        ],
        name="add_conversation",
        persistent=False,
        per_chat=True,
        per_user=True
    )
    application.add_handler(add_conv_handler)
    
    # Add conversation handler for remove
    remove_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("remove", show_remove_menu),
            CallbackQueryHandler(show_remove_menu, pattern="^admin_remove$")
        ],
        states={
            AWAITING_REMOVE_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_remove_value)]
        },
        fallbacks=[
            CallbackQueryHandler(button_callback, pattern="^menu_admin$"),
            CallbackQueryHandler(button_callback, pattern="^back_to_main$"),
            MessageHandler(filters.COMMAND, button_callback)
        ],
        name="remove_conversation",
        persistent=False,
        per_chat=True,
        per_user=True
    )
    application.add_handler(remove_conv_handler)
    
    # Add conversation handler for broadcast
    broadcast_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("broadcast", broadcast_command)],
        states={
            BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_message)]
        },
        fallbacks=[CallbackQueryHandler(cancel_broadcast, pattern="^broadcast_cancel$")],
        name="broadcast_conversation",
        persistent=False,
        per_chat=True
    )
    application.add_handler(broadcast_conv_handler)
    
    # Add callback query handler - –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –ø–æ—Å–ª–µ ConversationHandler, –Ω–æ –ø–µ—Ä–µ–¥ MessageHandler
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Add message handler - –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Start the Bot
    logger.info("Starting bot...")
    application.run_polling()
    
    logger.info("Bot stopped")

if __name__ == "__main__":
    main() 
