import os
import logging
import asyncio
import time
import json
import sqlite3
from datetime import datetime
from typing import List, Dict, Any, Optional, Union, Tuple, Set
import functools

from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand,
    BotCommandScopeChat
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    PicklePersistence,
    Defaults
)

from database import Database

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Initialize database
db = Database()

# Admin IDs - replace with actual admin user IDs
ADMIN_IDS = [6327617477]  # Add your admin Telegram user IDs here

# States for conversation handlers
BROADCAST_MESSAGE = 0
AWAITING_CHECK_VALUE = 1
AWAITING_ADD_VALUE = 2
AWAITING_REMOVE_VALUE = 3
AWAITING_WL_TYPE = 4
AWAITING_WL_REASON = 5
# States for contribution flow
AWAITING_CONTRIBUTE_VALUE = 6
AWAITING_CONTRIBUTE_LINK = 7
AWAITING_CONTRIBUTE_DESCRIPTION = 8

# WL types and reasons
WL_TYPES = ["GTD", "FCFS"]
WL_REASONS = ["Fluffy holder", "X contributor"]

# Keys for storing the active message in user_data
# Store (chat_id, message_id) for active menu
ACTIVE_MESSAGE_KEY = 'active_message'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
# –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
BOT_ACTIVE_MESSAGE_KEY = 'active_bot_message'

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π


def measure_time(func):
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        start_time = time.time()
        result = await func(*args, **kwargs)
        execution_time = time.time() - start_time

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–±–æ–ª–µ–µ 0.5 —Å–µ–∫—É–Ω–¥—ã)
        if execution_time > 0.5:
            logger.info(
                f"Performance: {
                    func.__name__} took {
                    execution_time:.2f} seconds")

        return result
    return wrapper

# Define command handlers


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /start command"""
    user = update.effective_user
    chat_id = update.effective_chat.id

    # Add user to the database
    db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        chat_id=chat_id
    )

    # Log the event
    db.log_event("start", user.id)

    # Show main menu with inline buttons
    await show_main_menu(update, context)

    # Also show persistent keyboard at bottom
    await show_persistent_keyboard(update, context)


async def show_main_menu(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show the main menu"""
    # Keyboard for main menu
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="action_check")],
        [InlineKeyboardButton("üîó –í–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥", callback_data="action_contribute")],
    ]

    # Add admin buttons if user is admin
    user = update.effective_user
    if user and user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="action_stats")])

    # Add links/FAQ button for all users
    keyboard.append([InlineKeyboardButton(
        "üìö –°—Å—ã–ª–∫–∏/FAQ", callback_data="action_links")])

    # Add admin panel button if user is admin
    if user and user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton(
            "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="action_admin")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # Main menu message
    message_text = (
        "*üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é MegaBuddies WL Bot*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ\n"
        "‚Ä¢ –í–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥, –ø–æ–¥–µ–ª–∏–≤—à–∏—Å—å –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏\n"
    )

    if user and user.id in ADMIN_IDS:
        message_text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"

    message_text += "‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ FAQ\n"

    if user and user.id in ADMIN_IDS:
        message_text += "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–π—Ç–ª–∏—Å—Ç–æ–º (–∞–¥–º–∏–Ω)\n"

    if update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )


async def help_command(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /help command"""
    await show_help_menu(update, context)
    # Show keyboard after help command
    await show_persistent_keyboard(update, context)


async def show_help_menu(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show help information with a back button"""
    user = update.effective_user

    # Base commands for all users
    help_text = (
        "*üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ MegaBuddies*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ `/check` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ\n"
        "‚Ä¢ `/contribute` - –í–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥\n"
        "‚Ä¢ `/menu` - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"

        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n"
        "1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º\n\n"
    )

    # Add admin commands if user is admin
    if user.id in ADMIN_IDS:
        help_text += (
            "*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n"
            "‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ `/add` - –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ `/remove` - –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ `/list` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ `/broadcast` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "‚Ä¢ `/stats` - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞\n"
            "‚Ä¢ `/export` - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç\n"
            "‚Ä¢ `/import` - –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É\n\n"
        )

    # Add back button
    keyboard = [[InlineKeyboardButton(
        "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update_or_send_message(
        update,
        context,
        help_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def show_check_menu(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show menu for checking a value against whitelist"""
    keyboard = [[InlineKeyboardButton(
        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:"

    if update.callback_query:
        # –ö–æ–≥–¥–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
        query = update.callback_query
        await query.answer()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=message_text,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    context.user_data['expecting_check'] = True

    # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
    if BOT_ACTIVE_MESSAGE_KEY in context.chat_data:
        del context.chat_data[BOT_ACTIVE_MESSAGE_KEY]

    return AWAITING_CHECK_VALUE


@measure_time
async def handle_check_value(update: Update,
                             context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle checking a value in the whitelist"""
    user = update.effective_user
    value = update.message.text.strip()

    logger.debug(
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: '{value}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    try:
        # Check the value against whitelist
        result = db.check_whitelist(value)

        # Log the check event
        db.log_event(
            "check_whitelist",
            update.effective_user.id,
            {"value": value},
            bool(result.get("found", False))
        )

        # Create reply markup with buttons for next actions
        keyboard = [
            [InlineKeyboardButton(
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="action_check")],
            [InlineKeyboardButton(
                "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Prepare response message
        if result.get("found", False):
            message_text = (
                f"‚úÖ {user.first_name}, –≤–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ!\n\n"
                f"*–ó–Ω–∞—á–µ–Ω–∏–µ:* `{value}`\n"
                f"*–¢–∏–ø WL:* {result.get('wl_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"*–ü—Ä–∏—á–∏–Ω–∞:* {result.get('wl_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
            )
        else:
            message_text = (
                f"‚ùå {
                    user.first_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–Ω–∞—á–µ–Ω–∏–µ `{value}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ.\n\n"
                f"–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º –≤–∞—à–µ–≥–æ –≤–∫–ª–∞–¥–∞ –≤ –ø—Ä–æ–µ–∫—Ç. "
                f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–æ–ø–∞—Å—Ç—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç!"
            )

        # Try to delete the user's message for cleaner interface
        try:
            await update.message.delete()
        except Exception as e:
            logger.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # Send a new message with the result
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )

        # Reset the conversation state for this user
        # Now the user can go in different directions based on buttons
        # or start a new check by sending another message
        return ConversationHandler.END


async def show_admin_menu(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show the admin panel menu"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        # If not admin, show error and return to main menu
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
            await show_main_menu(update, context)
        else:
            await update_or_send_message(
                update,
                context,
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.",
                parse_mode='Markdown'
            )
        return

    # Admin menu keyboard - optimized layout
    keyboard = [
        [
            InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
                callback_data="admin_add"),
            InlineKeyboardButton(
                "‚ûñ –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
                callback_data="admin_remove")
        ],
        [
            InlineKeyboardButton(
                "üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_list"),
            InlineKeyboardButton(
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(
                "üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
            InlineKeyboardButton(
                "üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")
        ],
        [
            InlineKeyboardButton(
                "üì• –ò–º–ø–æ—Ä—Ç", callback_data="admin_import")
        ],
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                              callback_data="back_to_main")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    admin_text = (
        "*üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:\n\n"
        "‚Ä¢ *–î–æ–±–∞–≤–∏—Ç—å* - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ *–£–¥–∞–ª–∏—Ç—å* - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö* - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ *–†–∞—Å—Å—ã–ª–∫–∞* - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "‚Ä¢ *–≠–∫—Å–ø–æ—Ä—Ç* - –≤—ã–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ CSV\n"
        "‚Ä¢ *–ò–º–ø–æ—Ä—Ç* - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞\n"
    )

    await update_or_send_message(
        update,
        context,
        admin_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def stats_command(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /stats command"""
    await show_stats_menu(update, context)


async def show_stats_menu(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show statistics of the bot usage"""
    user = update.effective_user

    # Check if user is admin
    if user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
            return
        else:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
            return

    # Get statistics
    total_users = db.get_total_users()
    active_users = db.get_active_users()
    whitelist_count = db.get_whitelist_count()
    checks_count = db.get_checks_count()
    last_day_checks = db.get_checks_count(days=1)
    last_week_checks = db.get_checks_count(days=7)

    # Format message
    stats_text = (
        "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {active_users}\n\n"

        f"*–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:*\n"
        f"–ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {whitelist_count}\n\n"

        f"*–ü—Ä–æ–≤–µ—Ä–∫–∏:*\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {checks_count}\n"
        f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {last_day_checks}\n"
        f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {last_week_checks}\n"
    )

    # Add back button
    keyboard = [[InlineKeyboardButton(
        "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Update message or send new
    if update.callback_query:
        await update.callback_query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )


async def show_add_menu(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show menu for adding a value to whitelist"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
            return ConversationHandler.END

        keyboard = [[InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(
                "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "‚ùóÔ∏è –í–∞–∂–Ω–æ: —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "‚ùóÔ∏è –í–∞–∂–Ω–æ: —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=reply_markup
            )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–ª—è
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞–π—Ç–ª–∏—Å—Ç
        context.user_data['expecting_add'] = True
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        if 'add_data' in context.user_data:
            del context.user_data['add_data']

        return AWAITING_ADD_VALUE


async def handle_add_value(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process the value for whitelist and ask for WL type"""
    value = update.message.text.strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.debug(
        f"–ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: '{value}'")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data['add_data'] = {'value': value}
    logger.debug(
        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ add_data: {
            context.user_data['add_data']}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    keyboard = []
    for wl_type in WL_TYPES:
        keyboard.append([InlineKeyboardButton(
            wl_type, callback_data=f"wl_type_{wl_type}")])
    keyboard.append([InlineKeyboardButton(
        "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    message_text = (
        f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: *{value}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–π—Ç–ª–∏—Å—Ç–∞:"
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.delete_message(
            chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
    except Exception as e:
        logger.debug(f"Could not delete user message: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    await update_or_send_message(
        update,
        context,
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    logger.debug(
        f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AWAITING_WL_TYPE ({AWAITING_WL_TYPE})")
    return AWAITING_WL_TYPE


async def handle_wl_type(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process WL type selection and ask for reason"""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–∑ callback_data
    selected_type = query.data.replace("wl_type_", "")
    logger.debug(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø WL: {selected_type}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö add_data
    if 'add_data' not in context.user_data:
        logger.error(
            "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ 'add_data' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é",
                    callback_data="admin_add")
            ]])
        )
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö
    if selected_type not in WL_TYPES:
        logger.error(
            f"–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø '{selected_type}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é",
                    callback_data="admin_add")
            ]])
        )
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤–∞–π—Ç–ª–∏—Å—Ç–∞
    context.user_data['add_data']['wl_type'] = selected_type
    logger.debug(
        f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ add_data: {
            context.user_data['add_data']}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã
    keyboard = []
    for reason in WL_REASONS:
        keyboard.append([InlineKeyboardButton(
            reason, callback_data=f"wl_reason_{reason}")])
    keyboard.append([InlineKeyboardButton(
        "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="menu_admin")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã
    value = context.user_data['add_data']['value']
    message_text = (
        f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: *{value}*\n"
        f"–¢–∏–ø –≤–∞–π—Ç–ª–∏—Å—Ç–∞: *{selected_type}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞–π—Ç–ª–∏—Å—Ç:"
    )

    await query.edit_message_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    logger.debug(
        f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AWAITING_WL_REASON ({AWAITING_WL_REASON})")
    return AWAITING_WL_REASON


async def handle_wl_reason(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process whitelist reason selection"""
    query = update.callback_query
    await query.answer()

    # Get the selected reason
    selected_reason = query.data.replace("wl_reason_", "")

    # Only process if in the right state
    if 'add_data' not in context.user_data:
        logger.warning(
            f"handle_wl_reason –≤—ã–∑–≤–∞–Ω –±–µ–∑ add_data –≤ context.user_data")
        return ConversationHandler.END

    # Save the selected reason
    context.user_data['add_data']['reason'] = selected_reason

    # Get data from context
    add_data = context.user_data.get('add_data', {})
    value = add_data.get('value', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    wl_type = add_data.get('wl_type', 'FCFS')

    logger.debug(
        f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É: value='{value}', type='{wl_type}', reason='{selected_reason}'")

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç
        success = db.add_to_whitelist(value, wl_type, selected_reason)

        # Log event
        db.log_event("add_whitelist", update.effective_user.id, {
            "value": value,
            "wl_type": wl_type,
            "wl_reason": selected_reason
        }, success)

        # Create response message
        if success:
            logger.debug(
                f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            message_text = (
                f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç!\n\n"
                f"*–ó–Ω–∞—á–µ–Ω–∏–µ:* `{value}`\n"
                f"*–¢–∏–ø WL:* {wl_type}\n"
                f"*–ü—Ä–∏—á–∏–Ω–∞:* {selected_reason}"
            )
        else:
            logger.debug(
                f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            message_text = f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ \"{value}\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ."

        # Buttons for next action
        keyboard = [
            [InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="admin_add")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
                                  callback_data="menu_admin")],
            [InlineKeyboardButton(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Send the response
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        if 'add_data' in context.user_data:
            del context.user_data['add_data']
        logger.debug(
            "–î–∞–Ω–Ω—ã–µ add_data –æ—á–∏—â–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        return ConversationHandler.END

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        message_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è \"{value}\" –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."

        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                                  callback_data="admin_add")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
                                  callback_data="menu_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        if 'add_data' in context.user_data:
            del context.user_data['add_data']
        logger.debug(
            "–î–∞–Ω–Ω—ã–µ add_data –æ—á–∏—â–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")

        return ConversationHandler.END


async def show_remove_menu(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show menu for removing a value from whitelist"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
            return ConversationHandler.END

        keyboard = [[InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞:",
                reply_markup=reply_markup
            )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        # –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
        context.user_data['expecting_remove'] = True

        return AWAITING_REMOVE_VALUE


async def handle_remove_value(update: Update,
                              context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process removing a value from whitelist"""
    value = update.message.text.strip()

    # Remove from whitelist
    success = db.remove_from_whitelist(value)

    # Log event
    db.log_event(
        "remove_whitelist", update.effective_user.id, {
            "value": value}, success)

    # Create response message
    if success:
        message_text = f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ \"{value}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞!"
    else:
        message_text = f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ \"{value}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ."

    # Buttons for next action
    keyboard = [
        [InlineKeyboardButton(
            "‚ûñ –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data="admin_remove")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
                              callback_data="menu_admin")],
        [InlineKeyboardButton(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Use delete_and_update_message instead
    await delete_and_update_message(
        update,
        context,
        message_text,
        reply_markup=reply_markup
    )

    return ConversationHandler.END


async def show_list_menu(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show all values in whitelist with pagination"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
            return
        else:
            await update_or_send_message(
                update,
                context,
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.",
                parse_mode='Markdown'
            )
        return

    # Get values from whitelist
    items = db.get_all_whitelist()

    # Create response message
    if items:
        # –ú–µ–Ω—å—à–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç
        # –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        items_per_page = 5
        page = context.user_data.get('whitelist_page', 0)
        total_pages = (len(items) + items_per_page - 1) // items_per_page

        # Ensure page is valid
        if page >= total_pages:
            page = 0

        # Save current page
        context.user_data['whitelist_page'] = page

        # Get values for current page
        start = page * items_per_page
        end = min(start + items_per_page, len(items))

        message_text = (
            f"*üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö*\n\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(items)}\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
        )

        # Add values with numbering in a clean format
        for i, item in enumerate(items[start:end], start=start + 1):
            message_text += (
                f"{i}. `{item['value']}`\n"
                f"   –¢–∏–ø: {
                    item['wl_type']}, –ü—Ä–∏—á–∏–Ω–∞: {
                    item['wl_reason']}\n\n"
            )

        # Navigation buttons
        keyboard = []
        nav_row = []

        if total_pages > 1:
            if page > 0:
                nav_row.append(
                    InlineKeyboardButton(
                        "‚óÄÔ∏è", callback_data="whitelist_prev"))

            nav_row.append(InlineKeyboardButton(
                f"{page + 1}/{total_pages}", callback_data="whitelist_info"))

            if page < total_pages - 1:
                nav_row.append(
                    InlineKeyboardButton(
                        "‚ñ∂Ô∏è", callback_data="whitelist_next"))

        keyboard.append(nav_row)
    else:
        message_text = "*üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö*\n\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞."

        # Back buttons
        keyboard = [
            [InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")],
            [InlineKeyboardButton(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update_or_send_message(
        update,
        context,
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def handle_whitelist_pagination(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle whitelist pagination buttons"""
    query = update.callback_query

    # Get current page
    page = context.user_data.get('whitelist_page', 0)

    # Update page based on button
    if query.data == "whitelist_next":
        page += 1
    elif query.data == "whitelist_prev":
        page -= 1

    # Save updated page
    context.user_data['whitelist_page'] = page

    # Show updated list
    await show_list_menu(update, context)


async def broadcast_command(update: Update,
                            context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the broadcast conversation"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(
        "‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Use update_or_send_message instead of creating a new message
    await update_or_send_message(
        update,
        context,
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=reply_markup
    )

    return BROADCAST_MESSAGE


async def broadcast_message(update: Update,
                            context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle the message to broadcast"""
    message_text = update.message.text

    if not message_text:
        await update_or_send_message(
            update,
            context,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
            ]])
        )
        return BROADCAST_MESSAGE

    users = db.get_all_users()

    if not users:
        await update_or_send_message(
            update,
            context,
            "–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_admin")
            ]])
        )
        return ConversationHandler.END

    # Log broadcast event
    db.log_event("broadcast", update.effective_user.id,
                 {"message_length": len(message_text)})

    # Try to delete the user's input message
    try:
        await context.bot.delete_message(
            chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
    except Exception as e:
        logger.debug(f"Could not delete user message: {e}")

    # Use our main message for progress updates
    await update_or_send_message(
        update,
        context,
        f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
    )

    success_count = 0
    fail_count = 0

    # Show progress updates periodically
    progress_interval = max(1, len(users) // 10)
    last_progress_update = time.time()

    for i, (user_id, chat_id) in enumerate(users):
        try:
            await context.bot.send_message(chat_id=chat_id, text=message_text)
            success_count += 1

            # Update progress message periodically
            if (i % progress_interval == 0 or i == len(users) -
                1) and time.time() - last_progress_update > 2:
                progress_percent = int((i + 1) / len(users) * 100)
                await update_or_send_message(
                    update,
                    context,
                    f"–†–∞—Å—Å—ã–ª–∫–∞: {progress_percent}% ({i + 1}/{len(users)})\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {fail_count}"
                )
                last_progress_update = time.time()

            # Add a small delay to avoid hitting rate limits
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.error(f"Failed to send message to user {user_id}: {e}")
            fail_count += 1

    # Final results with buttons
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
                              callback_data="menu_admin")],
        [InlineKeyboardButton(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update_or_send_message(
        update,
        context,
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {fail_count}",
        reply_markup=reply_markup
    )

    return ConversationHandler.END


async def cancel_broadcast(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel the broadcast conversation"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
                callback_data="menu_admin")
        ]])
    )

    return ConversationHandler.END


async def show_broadcast_menu(update: Update,
                              context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show menu for broadcast with options"""
    user = update.effective_user

    if user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
            return

        # Instructions for broadcast
        broadcast_text = (
            "*üì£ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞, "
            "–≤—ã–±–µ—Ä–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–æ—Ç –Ω–∞—á–Ω–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É."
        )

        # Add buttons
        keyboard = [
            [InlineKeyboardButton("‚úâÔ∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                                  callback_data="start_broadcast")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
                                  callback_data="menu_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            # Edit message if callback query
            await update.callback_query.edit_message_text(
                broadcast_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            # Send new message if command
            await update.message.reply_text(
                broadcast_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )


async def start_broadcast_from_button(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Start broadcast process from button click"""
    query = update.callback_query
    user = update.effective_user

    if user.id not in ADMIN_IDS:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return

    # Show message asking for broadcast text
    await query.edit_message_text(
        "*üì£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")
        ]])
    )

    # Set context variable to expect broadcast message
    context.user_data['expecting_broadcast'] = True


async def start_broadcast_process(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Process broadcast message and start sending"""
    message_text = update.message.text
    user = update.effective_user

    if user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return

    # Validate message
    if not message_text or len(message_text.strip()) == 0:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
                    callback_data="menu_admin")
            ]])
        )
        return

    # Get users for broadcasting
    users = db.get_all_users()

    if not users:
        await update.message.reply_text(
            "–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
                    callback_data="menu_admin")
            ]])
        )
        return

    # Start broadcast
    status_message = await update.message.reply_text(
        f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    # Send messages
    success_count = 0
    fail_count = 0

    for i, (user_id, chat_id) in enumerate(users):
        try:
            # Send the message
            await context.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                disable_notification=False
            )
            success_count += 1

            # Update status message every 10 users
            if (i + 1) % 10 == 0 or i + 1 == len(users):
                await status_message.edit_text(
                    f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞: {i + 1}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {fail_count}"
                )

            # Add a small delay to avoid hitting rate limits
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.error(f"Failed to send message to user {user_id}: {e}")
            fail_count += 1

    # Final status
    await status_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {fail_count}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
                callback_data="menu_admin")
        ]])
    )

    # Log broadcast event
    db.log_event("broadcast", user.id, {
        "total": len(users),
        "success": success_count,
        "fail": fail_count
    })


async def show_persistent_keyboard(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show a minimal persistent keyboard at the bottom of the chat"""
    user = update.effective_user

    # Create keyboard buttons - simplified for cleaner UI
    keyboard = []

    # Base navigation for all users including Links/FAQ
    keyboard.append(["üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", "üìö –°—Å—ã–ª–∫–∏/FAQ", "üè† –ú–µ–Ω—é"])

    # Add admin button if user is admin
    if user.id in ADMIN_IDS:
        keyboard.append(["üëë –ê–¥–º–∏–Ω"])

    # Create the reply markup with the keyboard
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,      # Make the keyboard smaller
        one_time_keyboard=False,   # Keep the keyboard visible
        selective=False,           # Show to all users in the chat
        input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏..."  # Helpful placeholder
    )

    # Set the keyboard without sending a message or with a minimal message
    # Determine the appropriate chat_id
    chat_id = None
    if update.message:
        chat_id = update.message.chat_id
    elif update.callback_query and update.callback_query.message:
        chat_id = update.callback_query.message.chat_id
    elif update.effective_chat:
        chat_id = update.effective_chat.id

    if chat_id:
        # Don't send a message, just update the keyboard
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
            reply_markup=reply_markup
        )

    # Add function to delete user message and update or send
    # message


    async def delete_and_update_message(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE,
            text: str,
            reply_markup=None,
            parse_mode=None
    ) -> None:
        """Delete user message and update the single bot message or send a new one"""
        # Try to delete the user's message if possible
        if update.message:
            try:
                await context.bot.delete_message(
                    chat_id=update.message.chat_id,
                    message_id=update.message.message_id
                )
            except Exception as e:
                logger.debug(f"Could not delete user message: {e}")

        # Then update the bot's single message
        await update_or_send_message(update, context, text, reply_markup, parse_mode)

    # Add function to save active message


    async def save_active_message(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE,
            message) -> None:
        """Save the active message ID for a user to enable in-place updates"""
        context.user_data[ACTIVE_MESSAGE_KEY] = (
            message.chat_id, message.message_id)

    # Add function to update or send message


    async def update_or_send_message(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE,
            text: str,
            reply_markup=None,
            parse_mode=None
    ) -> None:
        """Update existing message or send a new one for clean interface"""
        # If this is a callback query, try to edit the message
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                return
            except Exception as e:
                logger.debug(f"Could not edit callback query message: {e}")

        # If we have an active message ID for this chat, try to edit it
        chat_id = chat_id_from_update(update)
        if BOT_ACTIVE_MESSAGE_KEY in context.chat_data:
            active_message_id = context.chat_data[BOT_ACTIVE_MESSAGE_KEY]
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=active_message_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                return
            except Exception as e:
                logger.debug(
                    f"Could not edit active message {active_message_id}: {e}")

        # If we couldn't edit, send a new message
        if update.message:
            message = await update.message.reply_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        else:
            message = await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )

        # Store the message ID as the active one for this chat
        context.chat_data[BOT_ACTIVE_MESSAGE_KEY] = message.message_id


    async def clean_old_bot_messages(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE) -> None:
        """Clean up old bot messages to keep chat clean, except the active message"""
        chat_id = chat_id_from_update(update)

        # If we have an active message, keep track of it
        active_message_id = None
        if BOT_ACTIVE_MESSAGE_KEY in context.chat_data:
            active_message_id = context.chat_data[BOT_ACTIVE_MESSAGE_KEY]

        # Try to get recent messages to delete old ones
        try:
            # We can only delete recent messages that the bot sent
            # We'll use getUpdates with a limit to avoid excessive API calls
            # This is an approximation as getUpdates has limitations
            recent_updates = await context.bot.get_updates(limit=10, timeout=0)

            # Find messages from this bot in this chat
            bot_id = context.bot.id
            for bot_update in recent_updates:
                if (bot_update.message and
                    bot_update.message.from_user and
                    bot_update.message.from_user.id == bot_id and
                    bot_update.message.chat_id == chat_id and
                    (active_message_id is None or bot_update.message.message_id != active_message_id)):

                    # Try to delete this old message
                    try:
                        await context.bot.delete_message(
                            chat_id=chat_id,
                            message_id=bot_update.message.message_id
                        )
                    except Exception as e:
                        logger.debug(f"Could not delete old bot message: {e}")
        except Exception as e:
            logger.debug(f"Error getting updates to clean messages: {e}")


    def chat_id_from_update(update: Update) -> int:
        """Extract chat ID from an update object"""
        if update.effective_chat:
            return update.effective_chat.id
        elif update.callback_query and update.callback_query.message:
            return update.callback_query.message.chat_id
        elif update.message:
            return update.message.chat_id
        else:
            # Fallback - should not happen in normal operation
            return 0


    async def handle_message(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handler for all messages"""
        # Update user's last activity timestamp
        db.update_user_activity(update.effective_user.id)
        
        text = update.message.text.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        user_id = update.effective_user.id
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{text}'")

        # Handle messages based on expected input
        if context.user_data.get('expecting_add'):
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: '{text}'")
            context.user_data['expecting_add'] = False
            await handle_add_value(update, context)
            return  # –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π return, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist
        elif context.user_data.get('expecting_remove'):
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: '{text}'")
            context.user_data['expecting_remove'] = False
            await handle_remove_value(update, context)
            return  # –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π return, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist
        elif context.user_data.get('expecting_check'):
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: '{text}'")
            context.user_data['expecting_check'] = False
            await handle_check_value(update, context)
            return  # –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π return, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist
        elif context.user_data.get('expecting_broadcast'):
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: '{text}'")
            context.user_data['expecting_broadcast'] = False
            await start_broadcast_process(update, context)
            return  # –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π return, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist
        elif context.user_data.get('expecting_contribute'):
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∞: '{text}'")
            context.user_data['expecting_contribute'] = False
            await handle_contribute_value(update, context)
            return  # –î–æ–±–∞–≤–ª–µ–Ω —è–≤–Ω—ã–π return, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist
        elif 'conversation_state' in context.user_data:
            state = context.user_data['conversation_state']
            if state == AWAITING_CONTRIBUTE_LINK:
                await handle_contribution_link(update, context)
                return
            elif state == AWAITING_CONTRIBUTE_DESCRIPTION:
                await handle_contribution_description(update, context)
                # Clear the state after handling
                del context.user_data['conversation_state']
                return
        
        # Normal message handling - check whitelist
        # Treat any text as a check query for simplicity
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: '{text}'")
        
        try:
            # Check the value against whitelist
            value = text
            result = db.check_whitelist(value)
            user = update.effective_user
            
            # Create beautiful response
            if result.get("found", False):
                message_text = (
                    f"*‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏*\n\n"
                    f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
                    f"–ó–Ω–∞—á–µ–Ω–∏–µ `{value}` *–Ω–∞–π–¥–µ–Ω–æ* –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n\n"
                    f"–£ –≤–∞—Å {result.get('wl_type', '–ù–µ —É–∫–∞–∑–∞–Ω')} WL –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã {result.get('wl_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}! üéâ"
                )
            else:
                message_text = (
                    f"*‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏*\n\n"
                    f"–ù–∞–º –∂–∞–ª—å, {user.first_name}, –Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç –≤ BuddyWL.\n\n"
                    f"–ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º —Ç–≤–æ–π –≤–∫–ª–∞–¥ –∏ –Ω–∞–¥–µ–µ–º—Å—è —Å–∫–æ—Ä–æ —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è —É–∂–µ –≤–º–µ—Å—Ç–µ —Å —Ç–≤–æ–∏–º Buddy! üí´"
                )
            
            # Buttons for next action
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="action_check")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Try to delete the user message for cleaner interface
            try:
                await context.bot.delete_message(
                    chat_id=update.message.chat_id,
                    message_id=update.message.message_id
                )
            except Exception as e:
                logger.debug(f"Could not delete user message: {e}")
            
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if BOT_ACTIVE_MESSAGE_KEY in context.chat_data:
            del context.chat_data[BOT_ACTIVE_MESSAGE_KEY]


    async def button_callback(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle button callbacks"""
        query = update.callback_query
        callback_data = query.data

        logger.debug(f"Callback query received: {callback_data}")

        # Update user's last activity
        db.update_user_activity(update.effective_user.id)

        # Log the button click
        db.log_event("button_click", update.effective_user.id, {"button": callback_data})

        # Main menu and navigation
        if callback_data == "back_to_main":
            await show_main_menu(update, context)
        elif callback_data == "action_check":
            logger.debug(f"User {update.effective_user.id} pressed Check button")
            await show_check_menu(update, context)
        elif callback_data == "action_stats":
            logger.debug(f"User {update.effective_user.id} pressed Stats button")
            await show_stats_menu(update, context)
        elif callback_data == "action_links":
            logger.debug(f"User {update.effective_user.id} pressed Links button")
            await show_links_menu(update, context)
        elif callback_data == "action_admin":
            logger.debug(f"User {update.effective_user.id} pressed Admin button")
            await show_admin_menu(update, context)
        # Admin functions
        elif callback_data == "menu_admin":
            await show_admin_menu(update, context)
        elif callback_data == "admin_add":
            # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
            context.user_data['expecting_add'] = True
            await show_add_menu(update, context)
        elif callback_data == "admin_remove":
            # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
            context.user_data['expecting_remove'] = True
            await show_remove_menu(update, context)
        elif callback_data == "admin_list":
            await show_list_menu(update, context)
        elif callback_data == "admin_broadcast":
            await show_broadcast_menu(update, context)
        elif callback_data == "admin_export":
            await handle_export_button(update, context)
        elif callback_data == "admin_import":
            await show_import_menu(update, context)
        # Whitelist pagination
        elif callback_data == "prev_page":
            await handle_whitelist_pagination(update, context, -1)
        elif callback_data == "next_page":
            await handle_whitelist_pagination(update, context, 1)
        # Remove from whitelist with confirmation
        elif callback_data.startswith("remove_"):
            # Extract the value to remove
            value_to_remove = callback_data[7:]  # Remove "remove_" prefix
            success = db.remove_from_whitelist(value_to_remove)

            # Create response message with buttons
            if success:
                message_text = f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value_to_remove}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞."
            else:
                message_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ '{value_to_remove}' –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞."

            # Add a button to go back to admin menu
            keyboard = [[InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # Use delete_and_update_message instead of direct edit
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup
            )
        # Import modes
        elif callback_data == "import_replace":
            await process_import(update, context, "replace")
        elif callback_data == "import_append":
            await process_import(update, context, "append")
        # Broadcast
        elif callback_data == "start_broadcast":
            await start_broadcast_from_button(update, context)
        elif callback_data == "broadcast_cancel":
            await cancel_broadcast(update, context)
        # Whitelist type and reason handling
        elif callback_data.startswith("wl_type_"):
            # Handle whitelist type selection for adding new values
            await handle_wl_type(update, context)
        elif callback_data.startswith("wl_reason_"):
            # Handle whitelist reason selection for adding new values
            await handle_wl_reason(update, context)
        # Contribution functions
        elif callback_data == "action_contribute":
            logger.debug(f"User {update.effective_user.id} pressed Contribute button")
            await show_contribute_menu(update, context)
        elif callback_data == "view_contribute":
            logger.debug(f"User {update.effective_user.id} viewing contributions")
            await show_contributions_menu(update, context)
        elif callback_data == "add_contribution":
            logger.debug(f"User {update.effective_user.id} adding a new contribution")
            result = await start_add_contribution(update, context)
            # If result is a state, register it correctly
            if isinstance(result, int):
                context.user_data['conversation_state'] = result
        else:
            logger.warning(f"Unhandled callback data: {callback_data}")
            await query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


    async def show_links_menu(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show links and FAQ information"""
        keyboard = [[InlineKeyboardButton(
            "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message_text = (
            "*üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ FAQ*\n\n"
            "üîó *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–æ–µ–∫—Ç–∞ Buddies:*\n"
            "‚Ä¢ [–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç](https://megabuddies.io)\n"
            "‚Ä¢ [Twitter/X](https://twitter.com/MegaBuddiesNFT)\n"
            "‚Ä¢ [Discord](https://discord.gg/megabuddies)\n\n"
            "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n"
            "‚Ä¢ *–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç?*\n"
            "  –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö\n\n"
            "‚Ä¢ *–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ?*\n"
            "  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n\n"
            "‚Ä¢ *–ì–¥–µ —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∞–Ω–æ–Ω—Å–∞—Ö?*\n"
            "  –í Discord –∏ Twitter/X –ø—Ä–æ–µ–∫—Ç–∞"
        )

        if update.callback_query:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )


    async def menu_command(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handler for the /menu command"""
        await show_main_menu(update, context)
        # Show keyboard after menu command
        await show_persistent_keyboard(update, context)


    async def setup_commands(application: Application) -> None:
        """Set up bot commands and description"""
        bot = application.bot

        # Commands for all users
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
            BotCommand("check", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ"),
            BotCommand("contribute", "–í–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏")
        ]

        # Try to set commands for all users
        try:
            await bot.set_my_commands(commands)
        except Exception as e:
            logger.error(f"Error setting up commands: {e}")

        # Additional commands for admins
        admin_commands = commands + [
            BotCommand("admin", "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"),
            BotCommand("list", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ"),
            BotCommand("add", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç"),
            BotCommand("remove", "–£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞"),
            BotCommand("broadcast", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"),
            BotCommand("export", "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ CSV"),
            BotCommand("import", "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –∏–∑ CSV —Ñ–∞–π–ª–∞")
        ]

        # Try to set admin commands for each admin
        for admin_id in ADMIN_IDS:
            try:
                scope = BotCommandScopeChat(chat_id=admin_id)
                await bot.set_my_commands(admin_commands, scope=scope)
            except Exception as e:
                logger.error(f"Error setting up admin commands for user {admin_id}: {e}")

        # Set bot description
        await bot.set_my_description(
            "MegaBuddies –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–π—Ç–ª–∏—Å—Ç–æ–º. "
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, "
            "–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º - —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ."
        )

        # Set short description for bot startup screen
        await bot.set_my_short_description(
            "–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–π—Ç–ª–∏—Å—Ç–æ–º MegaBuddies"
        )

        logger.info(
            "Bot commands and descriptions set up successfully")


    async def handle_export_button(update: Update,
                                   context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle export button click"""
        user = update.effective_user

        # Only admins can export data
        if user.id not in ADMIN_IDS:
            await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # Change button message to show progress
        await update.callback_query.edit_message_text(
            "üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –§–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–∏–µ —Å–µ–∫—É–Ω–¥—ã."
        )

        try:
            # Export data to CSV
            success, filename = db.export_whitelist_to_csv()

            if success:
                # Send the generated file to the user
                with open(filename, 'rb') as file:
                    await context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=file,
                        filename=filename,
                        caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–∞–π—Ç–ª–∏—Å—Ç–∞"
                    )

                # Log the export event
                db.log_event(
                    "export_data", user.id, {
                        "format": "csv", "filename": filename}, True)

                # Return to admin menu
                await show_admin_menu(update, context)
            else:
                # Show error and go back to admin menu
                keyboard = [[InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.callback_query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.",
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"Error exporting data: {e}")

            # Show error and go back to admin menu
            keyboard = [[InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                reply_markup=reply_markup
            )


    async def export_command(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handler for the /export command - exports whitelist to CSV"""
        user = update.effective_user

        # Only admins can export data
        if user.id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # Send a message that export is in progress
        progress_message = await update.message.reply_text(
            "üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...",
            reply_markup=None
        )

        try:
            # Export data to CSV
            success, filename = db.export_whitelist_to_csv()

            if success:
                # Send the generated file to the user
                await progress_message.edit_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")

                with open(filename, 'rb') as file:
                    await context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=file,
                        filename=filename,
                        caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–∞–π—Ç–ª–∏—Å—Ç–∞"
                    )

                # Log the export event
                db.log_event(
                    "export_data", user.id, {
                        "format": "csv", "filename": filename}, True)

                # Clean up the progress message
                await progress_message.delete()
            else:
                await progress_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
        except Exception as e:
            logger.error(f"Error exporting data: {e}")
            await progress_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


    async def import_command(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handler for the /import command - starts the import process"""
        user = update.effective_user

        # Only admins can import data
        if user.id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # Show import instructions
        message_text = (
            "*üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.\n\n"
            "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
            "‚Ä¢ CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏-–∑–∞–ø—è—Ç—ã–º–∏\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑\n"
            "‚Ä¢ –°—Ç–æ–ª–±—Ü—ã: value, wl_type, wl_reason\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª–±–µ—Ü value\n\n"
            "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞:\n"
            "‚Ä¢ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ* - –¥–æ–±–∞–≤–∏—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º\n"
            "‚Ä¢ *–ó–∞–º–µ–Ω–∞* - —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç –Ω–æ–≤—ã–µ"
        )

        # Set the expected file flag
        context.user_data['expecting_import_file'] = True

        # Send import instructions
        await update.message.reply_text(
            message_text,
            parse_mode='Markdown'
        )


    async def handle_import_file(update: Update,
                                 context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle CSV file upload for import"""
        user = update.effective_user

        # Only admins can import data
        if user.id not in ADMIN_IDS:
            return

        # Check if we're expecting an import file
        if not context.user_data.get('expecting_import_file', False):
            return

        # Reset the flag
        context.user_data['expecting_import_file'] = False

        # Process the file
        if update.message.document:
            file = update.message.document

            # Check if it's a CSV file
            file_name = file.file_name
            if not file_name.lower().endswith('.csv'):
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV. "
                    "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton(
                            "‚Ü©Ô∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                            callback_data="admin_import")
                    ]])
                )
                return

            # Show processing message
            progress_message = await update.message.reply_text(
                "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...",
                reply_markup=None
            )

            try:
                # Download the file
                file_info = await context.bot.get_file(file.file_id)
                downloaded_file = await file_info.download_as_bytearray()

                # Save to temporary file
                import tempfile
                import os

                temp_dir = tempfile.gettempdir()
                temp_file_path = os.path.join(temp_dir, file_name)

                with open(temp_file_path, 'wb') as f:
                    f.write(downloaded_file)

                # Store file path in context for later processing
                context.user_data['import_file_path'] = temp_file_path

                # Show import options
                await progress_message.edit_text(
                    f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            "üìù –î–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º", callback_data="import_append")],
                        [InlineKeyboardButton(
                            "üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="import_replace")],
                        [InlineKeyboardButton(
                            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç", callback_data="import_cancel")]
                    ])
                )

                # Log event
                db.log_event(
                    "import_file_upload", user.id, {
                        "filename": file_name}, True)

            except Exception as e:
                logger.error(f"Error processing import file: {e}")
                await progress_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton(
                            "‚Ü©Ô∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                            callback_data="admin_import")
                    ]])
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton(
                            "‚Ü©Ô∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                            callback_data="admin_import")
                    ]])
                )


    async def process_import(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE,
            mode: str) -> None:
        """Process the import with the selected mode"""
        # Get the file path from context
        file_path = context.user_data.get('import_file_path')
        if not file_path:
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        "‚Ü©Ô∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                        callback_data="admin_import")
                ]])
            )
            return

        # Update message to show progress
        await update.callback_query.edit_message_text(
            f"‚è≥ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ {mode}...\n\n"
            "–≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤."
        )

        try:
            # Import the data
            import_mode = "replace" if mode == "replace" else "append"
            success, stats = db.import_whitelist_from_csv(
                file_path, import_mode)

            if success:
                # Format result message
                mode_text = "–∑–∞–º–µ–Ω—ã" if mode == "replace" else "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
                message_text = (
                    f"‚úÖ –ò–º–ø–æ—Ä—Ç –≤ —Ä–µ–∂–∏–º–µ {mode_text} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:*\n"
                    f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {stats.get('processed', 0)}\n"
                    f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {stats.get('added', 0)}\n"
                    f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {stats.get('skipped', 0)}\n"
                    f"‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {stats.get('invalid', 0)}\n\n"
                    f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {db.get_whitelist_count()}"
                )

                # Log event
                db.log_event("import_complete", update.effective_user.id, {
                    "mode": import_mode,
                    "stats": stats
                }, True)

                # Clean up the temporary file
                import os
                try:
                    os.remove(file_path)
                    logger.debug(f"Temporary file {file_path} deleted")
                except Exception as e:
                    logger.warning(
                        f"Could not delete temporary file {file_path}: {e}")

                # Clear the stored file path
                if 'import_file_path' in context.user_data:
                    del context.user_data['import_file_path']

                # Add buttons for next steps
                keyboard = [
                    [InlineKeyboardButton(
                        "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_list")],
                    [InlineKeyboardButton(
                        "üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="admin_import")],
                    [InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")]
                ]

                # Send result message
                await update.callback_query.edit_message_text(
                    message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            else:
                error_message = stats.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await update.callback_query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {error_message}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton(
                            "‚Ü©Ô∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                            callback_data="admin_import")
                    ]])
                )
        except Exception as e:
            logger.error(f"Error during import process: {e}")
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(
                        "‚Ü©Ô∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                        callback_data="admin_import")
                ]])
            )


    async def show_import_menu(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show the import menu with instructions"""
        user = update.effective_user

        # Only admins can import data
        if user.id not in ADMIN_IDS:
            if update.callback_query:
                await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.")
            else:
                await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # Set the expected file flag
        context.user_data['expecting_import_file'] = True

        message_text = (
            "*üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.\n\n"
            "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
            "‚Ä¢ CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏-–∑–∞–ø—è—Ç—ã–º–∏\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑\n"
            "‚Ä¢ –°—Ç–æ–ª–±—Ü—ã: value, wl_type, wl_reason\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª–±–µ—Ü value\n\n"
            "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞:\n"
            "‚Ä¢ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ* - –¥–æ–±–∞–≤–∏—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º\n"
            "‚Ä¢ *–ó–∞–º–µ–Ω–∞* - —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç –Ω–æ–≤—ã–µ"
        )

        # Add cancel button
        keyboard = [[InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="menu_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Show message
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )


    async def error_handler(
            update: object,
            context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle errors in the telegram bot"""
        try:
            if update and isinstance(
                    update, Update) and update.effective_message:
                # Only send error to chat if it's a known error for user input
                if isinstance(
                        context.error,
                        (ValueError,
                         KeyError,
                         IndexError)):
                    await update.effective_message.reply_text(
                        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        disable_web_page_preview=True
                    )
                else:
                    # For any other errors, send generic message to user
                    await update.effective_message.reply_text(
                        "üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        disable_web_page_preview=True
                    )

                # Try to restore the conversation state if needed
                if context.user_data.get('expecting_add') or
                context.user_data.get('expecting_remove') or
                context.user_data.get('expecting_check') or
                context.user_data.get('expecting_broadcast') or
                context.user_data.get('expecting_import_file'):

                    # Reset all conversation flags
                    context.user_data['expecting_add'] = False
                    context.user_data['expecting_remove'] = False
                    context.user_data['expecting_check'] = False
                    context.user_data['expecting_broadcast'] = False
                    context.user_data['expecting_import_file'] = False

                    # Clean up any temporary files
                    if 'import_file_path' in context.user_data:
                        import os
                        try:
                            os.remove(context.user_data['import_file_path'])
                        except BaseException:
                            pass
                        del context.user_data['import_file_path']

                    logger.warning("Reset conversation state due to error")

                # Log the error
                logger.error(
                    f"Update {update} caused error {
                        context.error}",
                    exc_info=context.error)

                # Notify admins about critical errors
                if isinstance(context.error, Exception) and not isinstance(
                        context.error, (ValueError, KeyError, IndexError)):
                    for admin_id in ADMIN_IDS:
                        try:
                            error_message = (
                                f"üî¥ *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:*\n\n"
                                f"```\n{str(context.error)[:200]}...\n```"
                            )

                            await context.bot.send_message(
                                chat_id=admin_id,
                                text=error_message,
                                parse_mode='Markdown'
                            )
                        except BaseException:
                            logger.error(
                                f"Failed to notify admin {admin_id} about error")
                        except Exception as e:
                            # If even the error handler fails, just log it
                            logger.critical(f"Error handler failed with {e}", exc_info=e)


    def main() -> None:
        """Start the bot"""
        # Get the bot token from environment variables
        token = os.getenv("BOT_TOKEN")
        if not token:
            logger.error("No BOT_TOKEN found in environment variables!")
            return

        # Initialize database
        try:
            logger.info("Initializing database...")
            global db
            db = Database()
            logger.info("Database initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing database: {e}")
            return

        # Set higher persistence and stability options
        # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä disable_web_page_preview –≤ Defaults
        defaults = Defaults(
            parse_mode='Markdown',
            allow_sending_without_reply=True,
            tzinfo=datetime.timezone.utc
        )
        
        # Create the Application with persistence
        persistence = PicklePersistence(filepath="bot_data")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è rate_limiter —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        application = (
            Application.builder()
            .token(token)
            .defaults(defaults)
            .persistence(persistence)
            .build()
        )
        
        # Setup bot commands and description on startup
        application.post_init = setup_commands
        
        # Command handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("menu", menu_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("broadcast", broadcast_command))
        application.add_handler(CommandHandler("admin", show_admin_menu))
        application.add_handler(CommandHandler("export", export_command))
        application.add_handler(CommandHandler("import", import_command))
        application.add_handler(CommandHandler("check", show_check_menu))
        application.add_handler(CommandHandler("contribute", show_contribute_menu))
        
        # Add conversation handlers
        
        # Add conversation handler for contributions
        contribution_conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("contribute", show_contribute_menu),
                CallbackQueryHandler(start_add_contribution, pattern="^add_contribution$")
            ],
            states={
                AWAITING_CONTRIBUTE_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contribution_link)],
                AWAITING_CONTRIBUTE_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contribution_description)]
            },
            fallbacks=[CallbackQueryHandler(show_contributions_menu, pattern="^view_contribute$")],
            name="contribution_conversation",
            persistent=True
        )
        application.add_handler(contribution_conv_handler)
        
        # Add conversation handler for check
        check_conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("check", show_check_menu),
                CallbackQueryHandler(show_check_menu, pattern="^action_check$")
            ],
            states={
                AWAITING_CHECK_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_check_value)]
            },
            fallbacks=[CallbackQueryHandler(button_callback)],
            name="check_conversation",
            persistent=False,
            per_chat=True
        )
        application.add_handler(check_conv_handler)
        
        # Add conversation handler for adding values
        add_conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("add", show_add_menu),
                CallbackQueryHandler(show_add_menu, pattern="^admin_add$")
            ],
            states={
                AWAITING_ADD_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_value)],
                AWAITING_WL_TYPE: [CallbackQueryHandler(handle_wl_type, pattern="^wl_type_")],
                AWAITING_WL_REASON: [CallbackQueryHandler(handle_wl_reason, pattern="^wl_reason_")]
            },
            fallbacks=[CallbackQueryHandler(button_callback)],
            name="add_conversation",
            persistent=False,
            per_chat=True
        )
        application.add_handler(add_conv_handler)
        
        # Add conversation handler for removing values
        remove_conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("remove", show_remove_menu),
                CallbackQueryHandler(show_remove_menu, pattern="^admin_remove$")
            ],
            states={
                AWAITING_REMOVE_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_remove_value)]
            },
            fallbacks=[CallbackQueryHandler(button_callback)],
            name="remove_conversation",
            persistent=False,
            per_chat=True
        )
        application.add_handler(remove_conv_handler)
        
        # Add conversation handler for broadcasting messages
        broadcast_conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("broadcast", broadcast_command),
                CallbackQueryHandler(show_broadcast_menu, pattern="^admin_broadcast$")
            ],
            states={
                BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_message)]
            },
            fallbacks=[CallbackQueryHandler(button_callback)],
            name="broadcast_conversation",
            persistent=False,
            per_chat=True
        )
        application.add_handler(broadcast_conv_handler)
        
        # Add handler for document uploads (for import)
        application.add_handler(MessageHandler(filters.Document.ALL, handle_import_file))
        
        # Add callback query handler - –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –ø–æ—Å–ª–µ ConversationHandler, –Ω–æ –ø–µ—Ä–µ–¥ MessageHandler
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # Add message handler to catch all unhandled messages
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # Start the Bot
        logger.info("Starting the bot...")
        application.run_polling()


    if __name__ == "__main__":
        main()
