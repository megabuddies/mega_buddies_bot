import logging
import os
from typing import Dict, Any, List, Optional, Union, Tuple

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    Document
)
from telegram.ext import ContextTypes, ConversationHandler

from src.utils import get_user_details, get_chat_id, format_stats
from src.utils.helpers import format_error
from src.database import Database
from src.handlers.basic import ADMIN_IDS

logger = logging.getLogger(__name__)

# Conversation states
BROADCAST_MESSAGE = 0

# Admin handlers
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /admin command - admin only"""
    try:
        user = update.effective_user
        
        # Check if user is admin
        if user.id not in ADMIN_IDS:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return
        
        # Show admin menu
        await show_admin_menu(update, context)
    except Exception as e:
        logger.error(f"Error in admin_command: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show admin panel menu"""
    try:
        # Create admin menu keyboard
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ WL", callback_data="action_list")],
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="action_add"),
                InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="action_remove")
            ],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="action_stats")],
            [
                InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="action_export"),
                InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç", callback_data="action_import")
            ],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="action_broadcast")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Admin panel message
        message_text = (
            "*üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:\n\n"
            "‚Ä¢ üìã –°–ø–∏—Å–æ–∫ WL - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –≤–∞–π—Ç–ª–∏—Å—Ç–∞\n"
            "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å\n"
            "‚Ä¢ ‚ûñ –£–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞\n"
            "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç - —ç–∫—Å–ø–æ—Ä—Ç –≤–∞–π—Ç–ª–∏—Å—Ç–∞ –≤ CSV\n"
            "‚Ä¢ üì• –ò–º–ø–æ—Ä—Ç - –∏–º–ø–æ—Ä—Ç –≤–∞–π—Ç–ª–∏—Å—Ç–∞ –∏–∑ CSV\n"
            "‚Ä¢ üì¢ –†–∞—Å—Å—ã–ª–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error in show_admin_menu: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")
        else:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

# Statistics handlers
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /stats command - admin only"""
    try:
        user = update.effective_user
        
        # Check if user is admin
        if user.id not in ADMIN_IDS:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return
        
        # Show statistics
        await show_stats_menu(update, context)
    except Exception as e:
        logger.error(f"Error in stats_command: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

async def show_stats_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show bot statistics"""
    try:
        db: Database = context.bot_data["db"]
        
        # Get statistics
        stats = await db.get_stats()
        
        # Format statistics message
        stats_text = format_stats(stats)
        
        # Add daily activity if available
        daily_activity = stats.get("daily_activity", {})
        if daily_activity:
            stats_text += "\n\n*üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:*\n"
            for date, count in sorted(daily_activity.items()):
                stats_text += f"{date}: {count} —Å–æ–±—ã—Ç–∏–π\n"
        
        # Add back buttons
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="action_stats")],
            [
                InlineKeyboardButton("üë• –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="action_admin"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                stats_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                stats_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error in show_stats_menu: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")
        else:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

# Broadcast handlers
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handler for the /broadcast command - admin only"""
    try:
        user = update.effective_user
        
        # Check if user is admin
        if user.id not in ADMIN_IDS:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return ConversationHandler.END
        
        # Show broadcast menu
        await show_broadcast_menu(update, context)
        return BROADCAST_MESSAGE
    except Exception as e:
        logger.error(f"Error in broadcast_command: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")
        return ConversationHandler.END

async def show_broadcast_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show menu for broadcasting a message"""
    try:
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "*üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
            "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç* –∏–ª–∏ _–∫—É—Ä—Å–∏–≤_"
        )
        
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error in show_broadcast_menu: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")
        else:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle broadcast message from admin and send to all users"""
    try:
        db: Database = context.bot_data["db"]
        message_text = update.message.text.strip()
        
        # Get all users
        all_users = await db.get_all_users()
        total_users = len(all_users)
        
        if total_users == 0:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return ConversationHandler.END
        
        # Show confirmation
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Store message for broadcasting
        context.user_data["broadcast_message"] = message_text
        
        await update.message.reply_text(
            f"*üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è*\n\n"
            f"{message_text}\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ *{total_users}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return BROADCAST_MESSAGE
    except Exception as e:
        logger.error(f"Error in handle_broadcast_message: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")
        return ConversationHandler.END

async def confirm_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Confirm and execute broadcast"""
    try:
        query = update.callback_query
        await query.answer()
        
        if "broadcast_message" not in context.user_data:
            await query.edit_message_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END
        
        # Get message and begin broadcast
        message_text = context.user_data["broadcast_message"]
        
        # Show processing message
        await query.edit_message_text(
            "üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
            parse_mode='Markdown'
        )
        
        # Start the broadcast process
        await start_broadcast_process(update, context)
        
        # Clear user data
        context.user_data.clear()
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in confirm_broadcast: {e}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")
        return ConversationHandler.END

async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel broadcast operation"""
    try:
        # Clear user data
        context.user_data.clear()
        
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await update.message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in cancel_broadcast: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")
        else:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")
        return ConversationHandler.END

async def start_broadcast_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Execute the actual broadcast to all users"""
    try:
        db: Database = context.bot_data["db"]
        message_text = context.user_data.get("broadcast_message", "")
        
        if not message_text:
            return
        
        # Get all users
        all_users = await db.get_all_users()
        total_users = len(all_users)
        
        if total_users == 0:
            if update.callback_query:
                await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        
        # Add broadcast header
        broadcast_text = (
            "*üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï*\n\n"
            f"{message_text}"
        )
        
        # Keep track of statistics
        sent_count = 0
        failed_count = 0
        
        # Send message to all users
        for user_id, chat_id in all_users:
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=broadcast_text,
                    parse_mode='Markdown'
                )
                sent_count += 1
                
                # Log successful broadcast
                await db.log_event(
                    "broadcast", 
                    user_id, 
                    {"success": True, "message_length": len(message_text)}, 
                    True
                )
            except Exception as e:
                logger.error(f"Error sending broadcast to user {user_id}: {e}")
                failed_count += 1
                
                # Log failed broadcast
                await db.log_event(
                    "broadcast", 
                    user_id, 
                    {"success": False, "error": str(e)}, 
                    False
                )
        
        # Update status message
        if update.callback_query:
            await update.callback_query.edit_message_text(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}"
            )
    except Exception as e:
        logger.error(f"Error in start_broadcast_process: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

# Export/Import handlers
async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /export command - admin only"""
    try:
        user = update.effective_user
        
        # Check if user is admin
        if user.id not in ADMIN_IDS:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return
        
        # Start export process
        await handle_export(update, context)
    except Exception as e:
        logger.error(f"Error in export_command: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

async def handle_export(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Export whitelist to CSV and send to user"""
    try:
        db: Database = context.bot_data["db"]
        
        # Generate filename with timestamp
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"whitelist_export_{timestamp}.csv"
        
        # Do the export
        success, message = await db.export_whitelist_to_csv(filename)
        
        if success:
            # Send the file
            with open(filename, 'rb') as file:
                await update.effective_message.reply_document(
                    document=file,
                    filename=filename,
                    caption=f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤–∞–π—Ç–ª–∏—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: {message}"
                )
            
            # Delete the file after sending
            os.remove(filename)
            
            # Log export event
            user_details = get_user_details(update)
            await db.log_event(
                "export", 
                user_details["user_id"], 
                {"success": True, "message": message}, 
                True
            )
        else:
            await update.effective_message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {message}")
            
            # Log failed export
            user_details = get_user_details(update)
            await db.log_event(
                "export", 
                user_details["user_id"], 
                {"success": False, "error": message}, 
                False
            )
    except Exception as e:
        logger.error(f"Error in handle_export: {e}")
        await update.effective_message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

async def import_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /import command - admin only"""
    try:
        user = update.effective_user
        
        # Check if user is admin
        if user.id not in ADMIN_IDS:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return
        
        # Show import instructions
        await show_import_menu(update, context)
    except Exception as e:
        logger.error(f"Error in import_command: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

async def show_import_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show import menu with instructions"""
    try:
        message_text = (
            "*üì• –ò–º–ø–æ—Ä—Ç –≤–∞–π—Ç–ª–∏—Å—Ç–∞*\n\n"
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "```\n"
            "value,wl_type,wl_reason\n"
            "0x123...,FCFS,Fluffy holder\n"
            "0xabc...,GTD,X contributor\n"
            "```\n\n"
            "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.\n"
            "–í—Å–µ —Å—Ç–æ–ª–±—Ü—ã –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ (–∑–Ω–∞—á–µ–Ω–∏—è) –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ", callback_data="import_mode_append")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ", callback_data="import_mode_update")],
            [InlineKeyboardButton("‚ôªÔ∏è –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å—ë", callback_data="import_mode_overwrite")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error in show_import_menu: {e}")
        if update.callback_query:
            await update.callback_query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")
        else:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

async def handle_import_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle import mode selection"""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("import_mode_"):
            mode = query.data.replace("import_mode_", "")
            context.user_data["import_mode"] = mode
            
            # Show instructions for file upload
            await query.edit_message_text(
                f"*üì• –ò–º–ø–æ—Ä—Ç –≤–∞–π—Ç–ª–∏—Å—Ç–∞ - {mode}*\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ '{mode}'.\n\n"
                f"–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
        elif query.data == "back_to_admin":
            # Return to admin menu
            await show_admin_menu(update, context)
    except Exception as e:
        logger.error(f"Error in handle_import_mode: {e}")
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

async def handle_import_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle uploaded CSV file for import"""
    try:
        db: Database = context.bot_data["db"]
        
        # Check if file is provided
        if not update.message.document:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª.")
            return
        
        # Get import mode
        import_mode = context.user_data.get("import_mode", "append")
        
        # Download the file
        file = await context.bot.get_file(update.message.document.file_id)
        file_path = f"import_temp_{update.message.document.file_name}"
        await file.download_to_drive(file_path)
        
        # Process import
        success, message = await db.import_whitelist_from_csv(file_path, import_mode)
        
        # Delete temporary file
        if os.path.exists(file_path):
            os.remove(file_path)
        
        if success:
            # Log successful import
            user_details = get_user_details(update)
            await db.log_event(
                "import", 
                user_details["user_id"], 
                {"success": True, "mode": import_mode, "message": message}, 
                True
            )
            
            # Send success message with buttons
            keyboard = [
                [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞", callback_data="action_list")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n{message}",
                reply_markup=reply_markup
            )
        else:
            # Log failed import
            user_details = get_user_details(update)
            await db.log_event(
                "import", 
                user_details["user_id"], 
                {"success": False, "mode": import_mode, "error": message}, 
                False
            )
            
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {message}")
    except Exception as e:
        logger.error(f"Error in handle_import_file: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")
        
        # Delete temporary file if exists
        file_path = f"import_temp_{update.message.document.file_name}"
        if os.path.exists(file_path):
            os.remove(file_path) 