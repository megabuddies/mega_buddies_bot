from typing import Dict, Any, List, Optional, Union
import logging

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import ContextTypes

from src.utils import get_user_details, get_chat_id
from src.utils.helpers import format_error
from src.database import Database

logger = logging.getLogger(__name__)

# Constants
ADMIN_IDS = [6327617477]  # Replace with your admin Telegram user IDs

# Helper for keyboard management
def get_main_keyboard(user_id: int) -> List[List[InlineKeyboardButton]]:
    """Generate main menu keyboard based on user permissions"""
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="action_check")],
    ]
    
    # Add admin buttons if user is admin
    if user_id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="action_stats")])
    
    # Add links/FAQ button for all users
    keyboard.append([InlineKeyboardButton("üìö –°—Å—ã–ª–∫–∏/FAQ", callback_data="action_links")])
    
    # Add admin panel button if user is admin
    if user_id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="action_admin")])
    
    return keyboard

# Command handlers
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /start command"""
    try:
        db: Database = context.bot_data["db"]
        user_details = get_user_details(update)
        
        # Add user to the database
        await db.add_user(
            user_id=user_details["user_id"],
            username=user_details["username"],
            first_name=user_details["first_name"],
            last_name=user_details["last_name"],
            chat_id=user_details["chat_id"]
        )
        
        # Log the event
        await db.log_event("start", user_details["user_id"])
        
        # Show main menu with inline buttons
        await show_main_menu(update, context)
        
        # Also show persistent keyboard at bottom
        await show_persistent_keyboard(update, context)
        
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /help command"""
    try:
        await show_help_menu(update, context)
        # Show keyboard after help command
        await show_persistent_keyboard(update, context)
    except Exception as e:
        logger.error(f"Error in help_command: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /menu command"""
    try:
        await show_main_menu(update, context)
    except Exception as e:
        logger.error(f"Error in menu_command: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}")

# UI display functions
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show the main menu"""
    try:
        user = update.effective_user
        keyboard = get_main_keyboard(user.id)
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Main menu message
        message_text = (
            "*üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é MegaBuddies WL Bot*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ\n"
        )
        
        if user and user.id in ADMIN_IDS:
            message_text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        
        message_text += "‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ FAQ\n"
        
        if user and user.id in ADMIN_IDS:
            message_text += "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–π—Ç–ª–∏—Å—Ç–æ–º (–∞–¥–º–∏–Ω)\n"
        
        # Handle message or callback query accordingly
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error in show_main_menu: {e}")

async def show_help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show help information with a back button"""
    try:
        user = update.effective_user
        
        # Base commands for all users
        help_text = (
            "*üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ MegaBuddies*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ `/check` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ\n"
            "‚Ä¢ `/menu` - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            
            "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n"
            "1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
            "2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
            "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º\n\n"
        )
        
        # Add admin commands if user is admin
        if user.id in ADMIN_IDS:
            help_text += (
                "*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n"
                "‚Ä¢ `/admin` - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "‚Ä¢ `/add` - –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
                "‚Ä¢ `/remove` - –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
                "‚Ä¢ `/list` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
                "‚Ä¢ `/broadcast` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                "‚Ä¢ `/stats` - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞\n"
                "‚Ä¢ `/export` - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç\n"
                "‚Ä¢ `/import` - –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É\n\n"
            )
        
        # Add back button
        keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Reply with help text
        if update.callback_query:
            await update.callback_query.edit_message_text(
                help_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                help_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error in show_help_menu: {e}")

async def show_persistent_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show a persistent keyboard at the bottom of the chat"""
    try:
        user = update.effective_user
        
        # Basic buttons for all users
        buttons = [
            [KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
            [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        
        # Add admin row for admin users
        if user and user.id in ADMIN_IDS:
            buttons.append([
                KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), 
                KeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
            ])
        
        reply_markup = ReplyKeyboardMarkup(
            buttons,
            resize_keyboard=True,
            one_time_keyboard=False
        )
        
        # Get chat ID
        chat_id = get_chat_id(update)
        if chat_id:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:",
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"Error in show_persistent_keyboard: {e}")

async def show_links_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show links/FAQ menu"""
    try:
        links_text = (
            "*üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏*\n\n"
            "*–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:*\n"
            "‚Ä¢ [–í–µ–±-—Å–∞–π—Ç MegaBuddies](https://megabuddies.io)\n"
            "‚Ä¢ [Twitter/X](https://x.com/MegaBuddies)\n"
            "‚Ä¢ [Discord](https://discord.gg/megabuddies)\n\n"
            
            "*FAQ:*\n"
            "‚Ä¢ *–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–∞–π—Ç–ª–∏—Å—Ç?*\n"
            "  –í–∞–π—Ç–ª–∏—Å—Ç - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–∏–Ω—Ç—É.\n\n"
            "‚Ä¢ *–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –≤–∞–π—Ç–ª–∏—Å—Ç?*\n"
            "  –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –≤ Discord –∏ Twitter.\n\n"
            "‚Ä¢ *–ö–æ–≥–¥–∞ –º–∏–Ω—Ç?*\n"
            "  –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.\n\n"
        )
        
        # Add back button
        keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                links_text,
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
        else:
            await update.message.reply_text(
                links_text,
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
    except Exception as e:
        logger.error(f"Error in show_links_menu: {e}")

# Message handlers
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle regular text messages - direct check functionality"""
    try:
        db: Database = context.bot_data["db"]
        user = update.effective_user
        message_text = update.message.text.strip()
        
        # Update user's last activity
        await db.update_user_activity(user.id)
        
        # Handle keyboard shortcuts
        if message_text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å":
            # Show check menu
            await context.bot_data["check_handler"](update, context)
            return
        elif message_text == "‚ùì –ü–æ–º–æ—â—å":
            # Show help menu
            await help_command(update, context)
            return
        elif message_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            # Show main menu
            await menu_command(update, context)
            return
        elif message_text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and user.id in ADMIN_IDS:
            # Show stats menu
            await context.bot_data["stats_handler"](update, context)
            return
        elif message_text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and user.id in ADMIN_IDS:
            # Show admin menu
            await context.bot_data["admin_handler"](update, context)
            return
        
        # Interpret all other text as check request
        result = await db.check_whitelist(message_text)
        
        # Format result
        if result.get("found", False):
            response_text = (
                f"‚úÖ *–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ!*\n\n"
                f"ID: `{result['id']}`\n"
                f"–ó–Ω–∞—á–µ–Ω–∏–µ: `{result['value']}`\n"
                f"–¢–∏–ø WL: `{result['wl_type']}`\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: `{result['wl_reason']}`"
            )
        else:
            response_text = "‚ùå *–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ!*"
        
        # Add check again button
        keyboard = [[InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë", callback_data="action_check")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            response_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error in handle_text_message: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {format_error(e)}") 